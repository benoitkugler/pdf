// Tool to generate the metrics for the standard Adobe Type1 fonts.
package generatestandard

import (
	"fmt"
	"io/ioutil"
	"os"
	"os/exec"
	"strings"

	"github.com/benoitkugler/pdf/fonts/type1font"
)

// dumpFontDescriptor creates a go source file containing
// the description of the fonts `fs`
func dumpFontDescriptor(fs []type1font.AFMFont) error {
	var code strings.Builder
	code.WriteString("package standardfonts\n")
	code.WriteString("// Code generated by standardfonts/generate. DO NOT EDIT\n\n")

	var sumupMap strings.Builder

	sumupMap.WriteString("// Fonts is a convenient mapping from a font name to its descriptor.\n")
	sumupMap.WriteString("var Fonts = map[string]type1font.Metrics{\n")

	for _, f := range fs {
		metrics := f.Metrics()
		goFontName := strings.ReplaceAll(f.FontName, "-", "_")
		code.WriteString("var " + goFontName + " = type1font.Metrics{\n")
		code.WriteString(fmt.Sprintf("Descriptor: %#v,\n", metrics.Descriptor))
		code.WriteString(fmt.Sprintf("Builtin: %#v,\n", metrics.Builtin))
		code.WriteString(fmt.Sprintf("// %d characters\n", len(metrics.CharsWidths)))
		code.WriteString(fmt.Sprintf("CharsWidths: %#v,\n", metrics.CharsWidths))
		code.WriteString(fmt.Sprintf("// %d characters\n", len(metrics.KernPairs)))

		s := ""
		for name, list := range metrics.KernPairs {
			s += fmt.Sprintf("%q: %#v,\n", name, list)
		}
		s = strings.ReplaceAll(s, "[]type1font.KernPair", "")
		s = strings.ReplaceAll(s, "type1font.KernPair", "")

		code.WriteString("KernPairs: map[string][]type1font.KernPair{\n")
		code.WriteString(s)
		code.WriteString("},\n")
		code.WriteString("}\n")

		sumupMap.WriteString(fmt.Sprintf(" %q: %s,\n", f.FontName, goFontName))
	}
	sumupMap.WriteString("}")

	code.WriteString("\n" + sumupMap.String())

	filename := "../fonts.go"
	err := ioutil.WriteFile(filename, []byte(code.String()), os.ModePerm)
	if err != nil {
		return err
	}

	err = exec.Command("goimports", "-w", filename).Run()
	return err
}
