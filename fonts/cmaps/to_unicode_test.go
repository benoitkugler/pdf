package cmaps

import (
	"fmt"
	"io/ioutil"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"testing"
)

func TestGeneratePredefined(t *testing.T) {
	rp := strings.NewReplacer("cmaps.ToUnicodeTranslation", "t",
		"cmaps.ToUnicodeArray", "a", "cmaps.ToUnicodePair", "p")
	for _, file := range [...]string{
		"predefined/data/Adobe-CNS1-UCS2.txt",
		"predefined/data/Adobe-GB1-UCS2.txt",
		"predefined/data/Adobe-Japan1-UCS2.txt",
		"predefined/data/Adobe-Korea1-UCS2.txt",
		"predefined/data/Adobe-KR-UCS2.txt",
	} {
		b, err := ioutil.ReadFile(file)
		if err != nil {
			t.Fatal(err)
		}
		cmap, err := ParseUnicodeCMap(b)
		if err != nil {
			t.Fatal(err)
		}

		name := strings.TrimSuffix(strings.ReplaceAll(filepath.Base(file), "-", "_"), ".txt")

		s := "package standardcmaps\n"
		s += `import "github.com/benoitkugler/pdf/fonts/cmaps"`
		s += "\n// Code generated by cmaps. DOT NOT EDIT\n\n"

		chunks := make([]string, len(cmap.Mappings))
		for i, m := range cmap.Mappings {
			chunks[i] = rp.Replace(fmt.Sprintf("%#v,", m))
		}
		data := fmt.Sprintf("var %s = cmaps.UnicodeCMap{UseCMap: %#v,\nMappings: []cmaps.ToUnicode{\n%s}}",
			name, cmap.UseCMap, strings.Join(chunks, "\n"))
		s += data

		fpath := "predefined/" + name + ".go"
		err = ioutil.WriteFile(fpath, []byte(s), os.ModePerm)
		if err != nil {
			t.Fatal(err)
		}

		exec.Command("goimports", "-w", fpath).Start()
	}
}
