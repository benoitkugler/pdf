package generate

import (
	"fmt"
	"io/ioutil"
	"os"
	"os/exec"
	"path/filepath"
	"strings"

	"github.com/benoitkugler/pdf/fonts/cmaps"
)

var rp = strings.NewReplacer("cmaps.ToUnicodeTranslation", "t",
	"cmaps.ToUnicodeArray", "a", "cmaps.ToUnicodePair", "p")

func generatedPredefined(file string) error {
	b, err := ioutil.ReadFile(file)
	if err != nil {
		return err
	}
	cmap, err := cmaps.ParseUnicodeCMap(b)
	if err != nil {
		return err
	}

	name := strings.TrimSuffix(strings.ReplaceAll(filepath.Base(file), "-", "_"), ".txt")

	s := "package standardcmaps\n"
	s += `import "github.com/benoitkugler/pdf/fonts/cmaps"`
	s += "\n// Code generated by cmaps. DOT NOT EDIT\n\n"

	chunks := make([]string, len(cmap.Mappings))
	for i, m := range cmap.Mappings {
		chunks[i] = rp.Replace(fmt.Sprintf("%#v,", m))
	}
	data := fmt.Sprintf("var %s = cmaps.UnicodeCMap{UseCMap: %#v,\nMappings: []cmaps.ToUnicode{\n%s}}",
		name, cmap.UseCMap, strings.Join(chunks, "\n"))
	s += data

	fpath := "../" + name + ".go"
	err = ioutil.WriteFile(fpath, []byte(s), os.ModePerm)
	if err != nil {
		return err
	}

	return exec.Command("goimports", "-w", fpath).Start()
}
