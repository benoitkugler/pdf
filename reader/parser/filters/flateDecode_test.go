package filters

import (
	"bytes"
	"io"
	"testing"
)

func TestFlatePredictor(t *testing.T) {
	encoded := []byte{0x68, 0xde, 0x62, 0x62, 0x64, 0x60, 0x10, 0x60, 0x60, 0x62, 0x60, 0xd0, 0xf2, 0x6, 0x91, 0x8c, 0x2b, 0x40, 0x24, 0xc3, 0x29, 0x10, 0xc9, 0xa6, 0x1, 0x22, 0x99, 0x5c, 0x41, 0x24, 0xf, 0x98, 0x64, 0x6c, 0x0, 0x91, 0xec, 0x86, 0x60, 0x71, 0x5, 0x30, 0xb9, 0x5, 0x2c, 0xbe, 0x7, 0xcc, 0xde, 0xa, 0x26, 0xb7, 0x83, 0xc9, 0xcf, 0x60, 0x13, 0xec, 0xc1, 0xb2, 0x3a, 0x60, 0x91, 0x2b, 0x60, 0xf2, 0x2e, 0x58, 0x44, 0xb, 0x48, 0x96, 0xfe, 0xb5, 0x4, 0x92, 0xdd, 0x4b, 0xaf, 0x31, 0x30, 0x31, 0x32, 0x28, 0x1c, 0x2, 0xdb, 0xcb, 0xc0, 0x48, 0x2b, 0x52, 0xf0, 0x23, 0x6d, 0xcd, 0xa7, 0x90, 0xfc, 0xcf, 0xf0, 0xe8, 0xf3, 0x33, 0x80, 0x0, 0x3, 0x0, 0x8d, 0x7b, 0x13, 0xc2}
	expected := []byte{
		0x1, 0x0, 0x0, 0x10, 0x0, 0x1, 0x0, 0x2a, 0x5b, 0x0, 0x1, 0x0, 0x2b, 0x3, 0x0, 0x1, 0x0, 0x2b, 0xcd, 0x0, 0x1, 0x0, 0x31, 0xf5, 0x0, 0x1, 0x0, 0x33, 0x3a, 0x0, 0x1, 0x0, 0x3f, 0x7f, 0x0, 0x1, 0x0, 0x40, 0xff, 0x0, 0x1, 0x0, 0x47, 0x30, 0x0, 0x1, 0x0, 0x49, 0x50, 0x0, 0x1, 0x0, 0x4b, 0x4, 0x0, 0x1, 0x0, 0x4c, 0xc0, 0x0, 0x1, 0x0, 0x4e, 0x75, 0x0, 0x1, 0x0, 0x50, 0x2c, 0x0, 0x1, 0x0, 0x52, 0x1f, 0x0, 0x1, 0x0, 0x58, 0x5e, 0x0, 0x1, 0x0, 0x59, 0x8a, 0x0, 0x1, 0x0, 0x5b, 0x5e, 0x0, 0x1, 0x0, 0x5d, 0x3b, 0x0, 0x1, 0x0, 0x5e, 0x65, 0x0, 0x1, 0x75, 0x5b, 0x9e, 0x0, 0x1, 0x0, 0x0, 0x74, 0x0, 0x2, 0x0, 0x20, 0x36, 0x0, 0x2, 0x0, 0x20, 0x36, 0x1, 0x2, 0x0, 0x20, 0x36, 0x2, 0x2, 0x0, 0x20, 0x36, 0x3, 0x2, 0x0, 0x20, 0x36, 0x4, 0x2, 0x0, 0x20, 0x36, 0x5, 0x2, 0x0, 0x20, 0x36, 0x6, 0x2, 0x0, 0x20, 0x36, 0x7, 0x2, 0x0, 0x20, 0x36, 0x8, 0x2, 0x0, 0x20, 0x36, 0x9, 0x2, 0x0, 0x20, 0x36, 0xa, 0x2, 0x0, 0x20, 0x36, 0xb, 0x2, 0x0, 0x20, 0x36, 0xc, 0x2, 0x0, 0x20, 0x36, 0xd, 0x2, 0x0, 0x20, 0x36, 0xe, 0x2, 0x0, 0x20, 0x36,
		0xf, 0x2, 0x0, 0x20, 0x47, 0x0, 0x2, 0x0, 0x20, 0x47, 0x1, 0x2, 0x0, 0x20, 0x47, 0x2, 0x2, 0x0, 0x20, 0x47, 0x3, 0x2, 0x0, 0x20, 0x47, 0x4, 0x2, 0x0, 0x20, 0x47, 0x5, 0x2, 0x0, 0x20, 0x47, 0x6, 0x2, 0x0, 0x20, 0x47, 0x7, 0x2, 0x0, 0x20, 0x47, 0x8, 0x2, 0x0, 0x20, 0x47, 0x9, 0x2, 0x0, 0x20, 0x47, 0xa, 0x2, 0x0, 0x20, 0x47, 0xb, 0x2, 0x0, 0x20, 0x47, 0xc, 0x2, 0x0, 0x20, 0x47, 0xd, 0x2, 0x0, 0x20, 0x47, 0xe, 0x2, 0x0, 0x20, 0x47, 0xf, 0x2, 0x0, 0x20, 0x47, 0x10, 0x2, 0x0, 0x20, 0x47, 0x11, 0x2, 0x0, 0x20, 0x47, 0x12, 0x2, 0x0, 0x20, 0x47, 0x13, 0x2, 0x0, 0x20, 0x47, 0x14, 0x2, 0x0, 0x20, 0x47, 0x15, 0x2, 0x0, 0x20, 0x47, 0x16, 0x2, 0x0, 0x20, 0x47, 0x17, 0x2, 0x0, 0x20, 0x47, 0x18, 0x2, 0x0, 0x20, 0x47, 0x19, 0x2, 0x0, 0x20, 0x47, 0x1a, 0x1, 0x0, 0x2, 0x3a, 0x0,
	}
	params := flateDecodeParams{predictor: 12, columns: 5, colors: 1, bpc: 8}

	r, err := flateDecoder(params, bytes.NewReader(encoded))
	if err != nil {
		t.Fatal(err)
	}
	got, err := io.ReadAll(r)
	if err != nil {
		t.Fatal(err)
	}

	if !bytes.Equal(expected, got) {
		t.Fatalf("unexpected content %v", got)
	}
}
